{"version":3,"file":"static/js/387.fbff307e.chunk.js","mappings":"0SAEaA,EAAWC,EAAAA,GAAAA,GAAH,mIAQRC,EAAWD,EAAAA,GAAAA,GAAH,6CAIRE,EAAYF,EAAAA,GAAAA,IAAH,gEAKTG,EAAWH,EAAAA,GAAAA,EAAH,gE,SCbN,SAASI,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAGA,IAAMG,EAAO,mCAAG,2FACdJ,GAAa,GADC,mBAGOK,EAAAA,EAAAA,IAAgBJ,GAHvB,OAGNK,EAHM,OAIZR,GAAQ,OAAIQ,IAJA,gDAMZC,QAAQC,IAAR,MANY,yBAQZR,GAAa,GARD,4EAAH,qDAWbI,GAZC,CAaF,GAAE,CAACH,KAGF,gCACGF,IAAa,SAACU,EAAA,EAAD,IACbZ,EAAKa,OAAS,GACb,SAACpB,EAAD,UACGO,EAAKc,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,cAAeC,EAAS,EAATA,GACnD,OACE,UAACvB,EAAD,YACE,SAACC,EAAD,CACEuB,IACEJ,EAAY,yCAC0BA,GAClC,oFAENK,IAAKH,KAEP,SAACpB,EAAD,UAAWoB,KACX,UAACpB,EAAD,WAAU,IAAEmB,EAAU,SAVTE,EAalB,OAGH,uBAAG,6DAIV,C,mMCvDDG,EAAAA,EAAAA,SAAAA,QAAyB,gCACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAAS,oCAGJ,IAAMC,EAAiB,mCAAG,sGACRF,EAAAA,EAAAA,IAAA,qBAAgC,CACrDG,OAAQ,CACNC,KAAM,KAHqB,uBACvBhB,EADuB,EACvBA,KADuB,kBAMxBA,GANwB,2CAAH,qDASjBiB,EAAY,mCAAG,WAAMC,GAAN,yFACHN,EAAAA,EAAAA,IAAA,eAA0B,CAC/CG,OAAQ,CACNG,MAAOA,EACPF,KAAM,KAJgB,uBAClBhB,EADkB,EAClBA,KADkB,kBAOnBA,GAPmB,2CAAH,sDAUZmB,EAAe,mCAAG,WAAMV,GAAN,yFACNG,EAAAA,EAAAA,IAAA,gBAAmBH,IADb,uBACrBT,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfD,EAAe,mCAAG,WAAMU,GAAN,yFACNG,EAAAA,EAAAA,IAAA,gBAAmBH,EAAnB,aADM,uBACrBT,EADqB,EACrBA,KADqB,kBAEtBA,EAAKT,MAFiB,2CAAH,sDAKf6B,EAAe,mCAAG,WAAMX,GAAN,yFACNG,EAAAA,EAAAA,IAAA,gBAAmBH,EAAnB,aADM,uBACrBT,EADqB,EACrBA,KADqB,kBAEtBA,EAAKqB,SAFiB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  justify-content: space-between;\n  font-size: 20px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 30px;\n`;\n\nexport const CastItem = styled.li`\n  max-width: 150px;\n`;\n\nexport const CastImage = styled.img`\n  border-radius: 5px;\n  width: 150px;\n`;\n\nexport const CastText = styled.p`\n  margin-top: 4px;\n  font-size: 16px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieCredits } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport { CastList, CastItem, CastImage, CastText } from './Cast.styled';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const getCast = async () => {\n      setIsLoading(true);\n      try {\n        const data = await getMovieCredits(movieId);\n        setCast([...data]);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {cast.length > 0 ? (\n        <CastList>\n          {cast.map(({ profile_path, character, original_name, id }) => {\n            return (\n              <CastItem key={id}>\n                <CastImage\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : 'https://placehold.co/100x150/476531/ffffff?text=There+is+no+photo&font=roboto.png'\n                  }\n                  alt={original_name}\n                />\n                <CastText>{original_name}</CastText>\n                <CastText>\"{character}\"</CastText>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      ) : (\n        <p>Sorry, we have no information about cast of this movie</p>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\naxios.defaults.params = {\n  api_key: '9324ab0fa327f5ab48c80a488e3b0e81',\n};\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get(`trending/movie/day`, {\n    params: {\n      page: 1,\n    },\n  });\n  return data;\n};\n\nexport const searchMovies = async query => {\n  const { data } = await axios.get(`search/movie`, {\n    params: {\n      query: query,\n      page: 1,\n    },\n  });\n  return data;\n};\n\nexport const getMovieDetails = async id => {\n  const { data } = await axios.get(`movie/${id}`);\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await axios.get(`movie/${id}/credits`);\n  return data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await axios.get(`movie/${id}/reviews`);\n  return data.results;\n};\n"],"names":["CastList","styled","CastItem","CastImage","CastText","Cast","useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","getCast","getMovieCredits","data","console","log","Loader","length","map","profile_path","character","original_name","id","src","alt","axios","api_key","getTrendingMovies","params","page","searchMovies","query","getMovieDetails","getMovieReviews","results"],"sourceRoot":""}